name: Deploy to AWS EC2

on:
  push:
    branches:
      - main

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          cd api
          npm install

      # Step 4: Run tests
      - name: Run tests
        run: |
          cd api
          chmod +x ./node_modules/.bin/jest
          npm test

      # Step 5: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers for frontend
        uses: actions/cache@v3
        with:
          path: ~/.cache/docker
          key: ${{ runner.os }}-docker-frontend-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-frontend-

      - name: Cache Docker layers for backend
        uses: actions/cache@v3
        with:
          path: ~/.cache/docker
          key: ${{ runner.os }}-docker-backend-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-backend-

      # Step 6: Log in to Docker Hub
      - name: Log in to Docker Hub    
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
        

      # Step 7: Build and push frontend Docker image
      - name: Build and push frontend Docker image
        run: |
          docker build --no-cache -t ${{ secrets.DOCKERHUB_USERNAME }}/ecommerce-frontend:${{ github.sha }} -f webapp/Dockerfile ./webapp
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/ecommerce-frontend:${{ github.sha }}

      # Step 8: Build and push backend Docker image
      - name: Build and push backend Docker image
        run: |
          docker build --no-cache -t ${{ secrets.DOCKERHUB_USERNAME }}/ecommerce-backend:${{ github.sha }} -f api/Dockerfile ./api
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/ecommerce-backend:${{ github.sha }}

      # Step 9: Deploy to AWS & Install Docker on EC2 if not installed
      - name: Install Docker on EC2 if not installed
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ubuntu  # Modify based on your EC2 user (e.g., ubuntu or ec2-user)
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            if ! command -v docker &> /dev/null; then
              echo "Docker not found, installing..."
              sudo apt update
              sudo apt install -y docker.io
              sudo usermod -aG docker ubuntu  # Allow non-root Docker access
            fi

      # Step 10: Log in to Docker Hub
      # - name: Log in to Docker Hub
      # run: |
      #   echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin


      # Step 11: Deploy to AWS EC2 (pull images and run containers)
      - name: Deploy to AWS EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ubuntu  # Modify based on your EC2 user (e.g., ubuntu or ec2-user)
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            # Pull the latest Docker images for frontend and backend
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/ecommerce-frontend:${{ github.sha }}
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/ecommerce-backend:${{ github.sha }}

            # Stop and remove the previous containers if they exist
            docker ps -q --filter "name=ecommerce-frontend" | grep -q . && docker stop ecommerce-frontend && docker rm ecommerce-frontend
            docker ps -q --filter "name=ecommerce-backend" | grep -q . && docker stop ecommerce-backend && docker rm ecommerce-backend

            # Run the new frontend and backend containers
            docker run -d --name ecommerce-frontend -p 80:80 ${{ secrets.DOCKERHUB_USERNAME }}/ecommerce-frontend:${{ github.sha }}
            docker run -d --name ecommerce-backend -p 5000:5000 ${{ secrets.DOCKERHUB_USERNAME }}/ecommerce-backend:${{ github.sha }}

